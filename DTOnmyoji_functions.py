import os
import sys
import win32gui
import json
import pyautogui
import asyncio

#setup icon
def resource_path(relative_path):
    """Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n th·∫≠t cho file khi ƒë√≥ng g√≥i b·∫±ng PyInstaller"""
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)

def is_window_valid(hwnd):
        return win32gui.IsWindow(hwnd) and win32gui.IsWindowVisible(hwnd)

DATA_FILE = "data.json"

def set_soul_value(handle, value):
    """Ghi gi√° tr·ªã v√†o data.json d∆∞·ªõi section Soul theo handle"""
    data = {}

    # ƒê·ªçc n·∫øu file ƒë√£ t·ªìn t·∫°i
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                pass  # file tr·ªëng ho·∫∑c l·ªói, b·ªè qua

    # ƒê·∫£m b·∫£o section "Soul" t·ªìn t·∫°i
    if "Soul" not in data:
        data["Soul"] = {}

    # Ghi gi√° tr·ªã
    data["Soul"][str(handle)] = value

    # Ghi tr·ªü l·∫°i file
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def get_soul_value(handle):
    """Tr·∫£ v·ªÅ gi√° tr·ªã ƒë√£ l∆∞u trong Soul theo handle, n·∫øu c√≥"""
    if not os.path.exists(DATA_FILE):
        return None

    with open(DATA_FILE, "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
            return data.get("Soul", {}).get(str(handle), None)
        except json.JSONDecodeError:
            return None

DATA_FILE = "data.json"
# Ghi v√† ƒë·ªçc gi√° tr·ªã t·ª´ data.json
def set_quest_value(handle, value):
    """Ghi gi√° tr·ªã v√†o data.json d∆∞·ªõi section Quest theo handle"""
    data = {}

    # ƒê·ªçc n·∫øu file ƒë√£ t·ªìn t·∫°i
    if os.path.exists(DATA_FILE): 
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                pass  # file tr·ªëng ho·∫∑c l·ªói, b·ªè qua

    # ƒê·∫£m b·∫£o section "Quest" t·ªìn t·∫°i
    if "Quest" not in data:
        data["Quest"] = {}

    # Ghi gi√° tr·ªã
    data["Quest"][str(handle)] = value

    # Ghi tr·ªü l·∫°i file
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def get_quest_value(handle):
    """Tr·∫£ v·ªÅ gi√° tr·ªã ƒë√£ l∆∞u trong Quest theo handle, n·∫øu c√≥"""
    if not os.path.exists(DATA_FILE):
        return None

    with open(DATA_FILE, "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
            return data.get("Quest", {}).get(str(handle), None)
        except json.JSONDecodeError:
            return None

def set_function_value(handle, value):
    """Ghi gi√° tr·ªã v√†o data.json d∆∞·ªõi section Function theo handle"""
    data = {}

    # ƒê·ªçc n·∫øu file ƒë√£ t·ªìn t·∫°i
    if os.path.exists(DATA_FILE): 
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                pass  # file tr·ªëng ho·∫∑c l·ªói, b·ªè qua

    # ƒê·∫£m b·∫£o section "Function" t·ªìn t·∫°i
    if "Function" not in data:
        data["Function"] = {}

    # Ghi gi√° tr·ªã
    data["Function"][str(handle)] = value

    # Ghi tr·ªü l·∫°i file
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def get_function_value(handle):
    """Tr·∫£ v·ªÅ gi√° tr·ªã ƒë√£ l∆∞u trong Function theo handle, n·∫øu c√≥"""
    if not os.path.exists(DATA_FILE):
        return None

    with open(DATA_FILE, "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
            return data.get("Function", {}).get(str(handle), None)
        except json.JSONDecodeError:
            return None

def get_mouse_position_relative_to_foreground_window():
    # L·∫•y handle c·ªßa c·ª≠a s·ªï ƒëang ·ªü foreground
    handle = win32gui.GetForegroundWindow()
    
    # L·∫•y t·ªça ƒë·ªô c·ªßa c·ª≠a s·ªï client
    rect = win32gui.GetWindowRect(handle)
    x_window, y_window, x_window_right, y_window_bottom = rect

    # L·∫•y v·ªã tr√≠ c·ªßa chu·ªôt tr√™n m√†n h√¨nh
    mouse_x, mouse_y = pyautogui.position()

    # T√≠nh to√°n v·ªã tr√≠ chu·ªôt t∆∞∆°ng ƒë·ªëi v·ªõi c·ª≠a s·ªï
    relative_x = mouse_x - x_window
    relative_y = mouse_y - y_window

    # Tr·∫£ v·ªÅ v·ªã tr√≠ chu·ªôt trong c·ª≠a s·ªï client
    return relative_x, relative_y

#function onmyoji
def resize_window(hwnd, width, height):
    # L·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa c·ª≠a s·ªï (x, y)
    rect = win32gui.GetWindowRect(hwnd)
    x = rect[0]
    y = rect[1]

    # Di chuy·ªÉn v√† thay ƒë·ªïi k√≠ch th∆∞·ªõc
    win32gui.MoveWindow(hwnd, x, y, width, height, True)

def change_title(new_title):
    # Get the handle of the current window
    hwnd = win32gui.GetForegroundWindow()
    
    # Set the new title for the window
    win32gui.SetWindowText(hwnd, new_title)

def get_client_size(hwnd):
    # L·∫•y rect client (t·ªça ƒë·ªô t∆∞∆°ng ƒë·ªëi b√™n trong c·ª≠a s·ªï)
    left, top, right, bottom = win32gui.GetClientRect(hwnd)
    width = right - left
    height = bottom - top
    return width, height

async def ensure_client_size(hwnd, target_width=800, target_height=481):
    while True:
        w, h = get_client_size(hwnd)
        if w == 784 and h == 442:
            print("‚úî ƒê√£ ƒë·∫°t k√≠ch th∆∞·ªõc chu·∫©n")
            break
        print(f"üîÅ K√≠ch th∆∞·ªõc hi·ªán t·∫°i: {w}x{h} ‚Üí Resize...")
        resize_window(hwnd, target_width, target_height)
        await asyncio.sleep(0.1)  # ƒë·ª£i m·ªôt ch√∫t ƒë·ªÉ h·ªá th·ªëng c·∫≠p nh·∫≠t

#data.json
data_json_key = ["Soul"]
def ensure_data_key(file_path="data.json", required_keys=data_json_key):
    # N·∫øu ch∆∞a c√≥ file th√¨ t·∫°o file tr·ªëng v·ªõi c√°c key c·∫ßn
    if not os.path.exists(file_path):
        data = {k: {} for k in required_keys}
    else:
        with open(file_path, "r") as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                data = {}

        # ƒê·∫£m b·∫£o m·ªói key c·∫ßn thi·∫øt ƒë·ªÅu c√≥ m·∫∑t
        for k in required_keys:
            if k not in data:
                data[k] = {}

    # Ghi ƒë√® l·∫°i n·∫øu c√≥ thay ƒë·ªïi ho·∫∑c file m·ªõi
    with open(file_path, "w") as f:
        json.dump(data, f, indent=4)
        
ensure_data_key()
#functions
def find_window(title_keyword):
    def enum_handler(hwnd, result):
        if title_keyword.lower() in win32gui.GetWindowText(hwnd).lower():
            result.append(hwnd)
    results = []
    win32gui.EnumWindows(enum_handler, results)
    return results[0] if results else None
